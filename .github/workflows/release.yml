name: Release

on:
  push:
    tags: ['v*']

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            wails_platform: linux/amd64
            tags: '-tags webkit2_41'
          - name: windows
            os: windows-latest
            wails_platform: windows/amd64
            tags: ''
          - name: macos
            os: macos-latest
            wails_platform: darwin/universal
            tags: ''
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect build metadata
        id: build_info
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "commit=$COMMIT" >> "$GITHUB_OUTPUT"
          echo "date=$DATE" >> "$GITHUB_OUTPUT"

      - uses: actions/setup-go@v5
        with:
          go-version: '1.23'

      - uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Linux tarball
        if: matrix.name == 'linux'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          wails build -platform ${{ matrix.wails_platform }} -clean ${{ matrix.tags }} -ldflags "${LD_FLAGS}"
          mkdir -p pkg/yanta
          cp build/bin/yanta pkg/yanta/
          cp yanta.desktop pkg/yanta/
          cp build/appicon.png pkg/yanta/yanta.png
          pushd pkg >/dev/null
          tar czf ../yanta-linux.tar.gz yanta
          popd >/dev/null

      - name: Build Windows executables
        if: matrix.name == 'windows'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          wails build -platform ${{ matrix.wails_platform }} -clean -o yanta-portable.exe -webview2 download -ldflags "${LD_FLAGS}"
          wails build -platform ${{ matrix.wails_platform }} -o yanta-installer.exe -nsis -webview2 download -ldflags "${LD_FLAGS}"

      - name: Build macOS tarball
        if: matrix.name == 'macos'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          wails build -platform ${{ matrix.wails_platform }} -clean -ldflags "${LD_FLAGS}"
          pushd build/bin >/dev/null
          tar czf ../../yanta-macos.tar.gz yanta.app
          popd >/dev/null

      - name: Upload Linux artifact
        if: matrix.name == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: yanta-linux.tar.gz

      - name: Upload Windows artifacts
        if: matrix.name == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            build/bin/yanta-portable.exe
            build/bin/yanta-installer.exe

      - name: Upload macOS artifact
        if: matrix.name == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: yanta-macos.tar.gz

  debian:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: linux

      - name: Build Debian package
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF#refs/tags/v}
          tar xzf linux/yanta-linux.tar.gz
          mkdir -p deb/DEBIAN deb/usr/bin deb/usr/share/applications deb/usr/share/pixmaps
          cp yanta/yanta deb/usr/bin/
          chmod 755 deb/usr/bin/yanta
          cp yanta/yanta.desktop deb/usr/share/applications/
          cp yanta/yanta.png deb/usr/share/pixmaps/
          cat > deb/DEBIAN/control <<CTRL
          Package: yanta
          Version: ${VERSION}
          Architecture: amd64
          Maintainer: Omar Ahmed <me@mrg.sh>
          Depends: libgtk-3-0, libwebkit2gtk-4.1-0
          Description: Note-taking app
          CTRL
          dpkg-deb --build --root-owner-group deb
          mv deb.deb yanta_${VERSION}_amd64.deb
          echo "PACKAGE_VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: Upload Debian artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian
          path: yanta_${{ env.PACKAGE_VERSION }}_amd64.deb

  release:
    needs: [build, debian]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/linux/yanta-linux.tar.gz
            artifacts/windows/build/bin/yanta-portable.exe
            artifacts/windows/build/bin/yanta-installer.exe
            artifacts/macos/yanta-macos.tar.gz
            artifacts/debian/yanta_*_amd64.deb
          generate_release_notes: true
