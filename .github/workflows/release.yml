name: Release

on:
  push:
    tags: ["v*"]

jobs:
  build:
    name: Build ${{ matrix.name }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          - name: linux
            os: ubuntu-latest
            wails_platform: linux/amd64
            tags: "-tags webkit2_41"
          - name: windows
            os: windows-latest
            wails_platform: windows/amd64
            tags: ""
          - name: macos
            os: macos-latest
            wails_platform: darwin/universal
            tags: ""
    defaults:
      run:
        shell: bash
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Collect build metadata
        id: build_info
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF#refs/tags/v}
          COMMIT=$(git rev-parse --short HEAD)
          DATE=$(date -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "version=$VERSION" >> "$GITHUB_OUTPUT"
          echo "commit=$COMMIT" >> "$GITHUB_OUTPUT"
          echo "date=$DATE" >> "$GITHUB_OUTPUT"

      - name: Install Linux dependencies
        if: matrix.name == 'linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            libgtk-3-dev \
            libwebkit2gtk-4.1-dev \
            build-essential \
            pkg-config \
            libayatana-appindicator3-dev \
            libx11-dev \
            xvfb

      - uses: actions/setup-go@v5
        with:
          go-version: "1.23"

      - uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: "npm"
          cache-dependency-path: frontend/package-lock.json

      - name: Install Windows dependencies
        if: matrix.name == 'windows'
        shell: powershell
        run: |
          choco install -y nsis
          $nsisPath = "${env:ProgramFiles(x86)}\NSIS"
          if (Test-Path $nsisPath) {
            "$nsisPath" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
            "$nsisPath\Bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
          }

      - name: Install Wails
        run: go install github.com/wailsapp/wails/v2/cmd/wails@v2.10.2

      - name: Install frontend dependencies
        working-directory: frontend
        run: npm ci

      - name: Build Linux artifacts
        id: linux_artifacts
        if: matrix.name == 'linux'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          VERSION=${{ steps.build_info.outputs.version }}
          PKGREL=1
          xvfb-run -a wails build -platform ${{ matrix.wails_platform }} -clean ${{ matrix.tags }} -ldflags "${LD_FLAGS}"
          scripts/build_linux_artifacts.sh "$VERSION" "$PKGREL"

      - name: Build Windows executables
        if: matrix.name == 'windows'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          wails build -platform ${{ matrix.wails_platform }} -clean -nsis -webview2 download -ldflags "${LD_FLAGS}"

      - name: Prepare Windows artifacts
        if: matrix.name == 'windows'
        run: |
          set -euo pipefail
          ls -al build/bin
          PORTABLE=build/bin/yanta.exe
          if [ ! -f "$PORTABLE" ]; then
            echo 'Portable binary not found in build/bin' >&2
            exit 1
          fi
          cp "$PORTABLE" yanta-windows-portable.exe
          INSTALLER=$(find build/bin -maxdepth 1 -type f -iname '*installer*.exe' -print -quit)
          if [ -z "$INSTALLER" ]; then
            echo 'Could not locate the NSIS installer output in build/bin' >&2
            exit 1
          fi
          cp "$INSTALLER" yanta-windows-installer.exe

      - name: Build macOS tarball
        if: matrix.name == 'macos'
        env:
          LD_FLAGS: "-X yanta/internal/system.BuildVersion=${{ steps.build_info.outputs.version }} -X yanta/internal/system.BuildCommit=${{ steps.build_info.outputs.commit }} -X yanta/internal/system.BuildDate=${{ steps.build_info.outputs.date }}"
        run: |
          set -euo pipefail
          wails build -platform ${{ matrix.wails_platform }} -clean -ldflags "${LD_FLAGS}"
          pushd build/bin >/dev/null
          tar czf ../../yanta-macos.tar.gz yanta.app
          popd >/dev/null

      - name: Upload Linux artifacts
        if: matrix.name == 'linux'
        uses: actions/upload-artifact@v4
        with:
          name: linux
          path: |
            ${{ steps.linux_artifacts.outputs.linux_tar }}
            ${{ steps.linux_artifacts.outputs.arch_pkg }}
          if-no-files-found: error

      - name: Upload Windows artifacts
        if: matrix.name == 'windows'
        uses: actions/upload-artifact@v4
        with:
          name: windows
          path: |
            yanta-windows-portable.exe
            yanta-windows-installer.exe
          if-no-files-found: error

      - name: Upload macOS artifact
        if: matrix.name == 'macos'
        uses: actions/upload-artifact@v4
        with:
          name: macos
          path: yanta-macos.tar.gz
          if-no-files-found: error

  debian:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Download Linux artifact
        uses: actions/download-artifact@v4
        with:
          name: linux
          path: linux

      - name: Build Debian package
        run: |
          set -euo pipefail
          VERSION=${GITHUB_REF#refs/tags/v}
          TAR_PATH=$(find linux -type f -name 'yanta-linux.tar.gz' -print -quit)
          if [ -z "$TAR_PATH" ]; then
            echo "Could not locate linux tarball in downloaded artifacts" >&2
            exit 1
          fi
          DEB_PATH=$(scripts/build_deb_from_tar.sh "$TAR_PATH" "$VERSION")
          cp "$DEB_PATH" "yanta_${VERSION}_amd64.deb"
          echo "PACKAGE_VERSION=${VERSION}" >> "$GITHUB_ENV"

      - name: Upload Debian artifact
        uses: actions/upload-artifact@v4
        with:
          name: debian
          path: yanta_${{ env.PACKAGE_VERSION }}_amd64.deb
          if-no-files-found: error

  release:
    needs: [build, debian]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Inspect artifacts
        run: ls -R artifacts

      - name: Publish release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            artifacts/linux/**/yanta-linux.tar.gz
            artifacts/linux/**/yanta-*-x86_64.pkg.tar.gz
            artifacts/windows/yanta-windows-portable.exe
            artifacts/windows/yanta-windows-installer.exe
            artifacts/macos/yanta-macos.tar.gz
            artifacts/debian/yanta_*_amd64.deb
          generate_release_notes: true
